import builtins from "builtin-modules";
import esbuild from "esbuild";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// ----- mode detection -------------------------------------------------
const isProd = process.argv.includes("production");
const isDev  = process.argv.includes("dev"); // non‑watch dev build

// ----- shared options -------------------------------------------------
const shared = {
  banner: { js: banner },
  bundle: true,
  entryPoints: ["src/main.ts"],
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  logLevel: "info",
  treeShaking: true,
  target: "es2018",
};

// ----- final build configuration ---------------------------------------
const buildOptions = {
  ...shared,
  minify: isProd,
  sourcemap: isProd ? false : "inline",
  outfile: "main.js",
};

// ----------------------------------------------------------------------
// Helper that runs a one‑off build (production or dev)
async function runOneOffBuild() {
  await esbuild.build(buildOptions);
  process.exit(0);
}

// ----------------------------------------------------------------------
// Main entry point
(async () => {
  if (isProd) {
    // Production: one‑off minified build
    await runOneOffBuild();
  } else if (isDev) {
    // Dev (non‑watch): one‑off readable build
    await runOneOffBuild();
  } else {
    // Original watch mode (no flag)
    const ctx = await esbuild.context({
      ...shared,
      minify: false,
      sourcemap: "inline",
      outfile: "main.js",
    });
    await ctx.watch(); // starts the persistent watch process
  }
})().catch((e) => {
  console.error(e);
  process.exit(1);
});
